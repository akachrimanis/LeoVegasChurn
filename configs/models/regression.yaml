models:
  regression:
    # linear_regression:
    #   model_name: "Linear Regression"
    #   library: "sklearn.linear_model"
    #   implementation: "LinearRegression"
    #   hyperparameters:
    #     fit_intercept: [true, false]
    #     #normalize: [true, false]
    #     #copy_X: [true, false]
    #     #n_jobs: [None, -1]
        
    # ridge:
    #   model_name: "Ridge Regression"
    #   library: "sklearn.linear_model"
    #   implementation: "Ridge"
    #   hyperparameters:
    #     alpha: [0.1, 1, 10, 100, 1000]
    #     solver: ["auto", "svd", "cholesky", "lsqr"]
    #     fit_intercept: [true, false]
    #     normalize: [true, false]
        
    # lasso:
    #   model_name: "Lasso Regression"
    #   library: "sklearn.linear_model"
    #   implementation: "Lasso"
    #   hyperparameters:
    #     alpha: [0.1, 1, 10, 100]
    #     fit_intercept: [true, false]
    #     max_iter: [1000, 2000]
    #     normalize: [true, false]
     
    # random_forest_regressor:
    #   model_name: "Random Forest Regressor"
    #   library: "sklearn.ensemble"
    #   implementation: "RandomForestRegressor"
    #   hyperparameters:
    #     n_estimators: [100, 200, 300]
    #     max_depth: [None, 10, 20, 30]
    #     min_samples_split: [2, 5, 10]
    #     min_samples_leaf: [1, 2, 4]
    #     max_features: [None, "auto", "sqrt", "log2"]
    #     bootstrap: [true, false]
        
    gradient_boosting_regressor:
      model_name: "Gradient Boosting Regressor"
      library: "sklearn.ensemble"
      implementation: "GradientBoostingRegressor"
      hyperparameters:
        n_estimators: [300]
        learning_rate: [0.01, 0.1, 0.2]
        max_depth: [7]
        #min_samples_split: [2, 5, 10]
        #min_samples_leaf: [1, 2, 4]
        #subsample: [0.8, 1.0]
        
