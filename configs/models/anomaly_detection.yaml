models:
  anomaly_detection:
    isolation_forest:
      library: sklearn.ensemble
      implementation: IsolationForest
      hyperparameters:
        n_estimators: [50, 100, 200]
        max_samples: ["auto", 0.5, 0.7, 1.0]
        contamination: [0.01, 0.05, 0.1, 0.2]
        max_features: [1.0, 0.8, 0.5]
        random_state: [42]

    one_class_svm:
      library: sklearn.svm
      implementation: OneClassSVM
      hyperparameters:
        kernel: ["linear", "poly", "rbf", "sigmoid"]
        gamma: ["scale", "auto", 0.1, 0.01, 0.001]
        nu: [0.1, 0.5, 0.7, 0.9]

    elliptic_envelope:
      library: sklearn.covariance
      implementation: EllipticEnvelope
      hyperparameters:
        contamination: [0.01, 0.05, 0.1, 0.2]
        support_fraction: [None, 0.5, 0.7, 0.9]
        random_state: [42]

    local_outlier_factor:
      library: sklearn.neighbors
      implementation: LocalOutlierFactor
      hyperparameters:
        n_neighbors: [5, 10, 20, 30]
        algorithm: ["auto", "ball_tree", "kd_tree", "brute"]
        metric: ["euclidean", "manhattan", "cosine"]
        contamination: [0.01, 0.05, 0.1, 0.2]
        novelty: [True]  # Used when predicting on new data

    autoencoder:
      library: keras.models
      implementation: Sequential
      hyperparameters:
        input_dim: [None]  # To be dynamically set based on data
        encoding_dim: [16, 32, 64]
        activation: ["relu", "sigmoid"]
        epochs: [50, 100, 200]
        batch_size: [32, 64, 128]
        optimizer: ["adam", "sgd", "rmsprop"]

    robust_covariance:
      library: sklearn.covariance
      implementation: MinCovDet
      hyperparameters:
        support_fraction: [None, 0.5, 0.7, 0.9]
        random_state: [42]

    kmeans_outlier_detection:
      library: sklearn.cluster
      implementation: KMeans
      hyperparameters:
        n_clusters: [2, 3, 5, 10]
        init: ["k-means++", "random"]
        max_iter: [300, 500]
        contamination: [0.01, 0.05, 0.1, 0.2]

    dbscan_outlier_detection:
      library: sklearn.cluster
      implementation: DBSCAN
      hyperparameters:
        eps: [0.3, 0.5, 0.7, 1.0]
        min_samples: [5, 10, 20]
        metric: ["euclidean", "manhattan", "cosine"]
