models:
  classification:
    LogisticRegression:
      library: sklearn.linear_model
      implementation: LogisticRegression
      hyperparameters:
        C: [0.01, 0.1, 1, 10]
        penalty: ['l2', 'none']
        solver: ['lbfgs', 'liblinear']
    DecisionTreeClassifier:
      library: sklearn.tree
      implementation: DecisionTreeClassifier
      hyperparameters:
        max_depth: [None, 5, 10, 20]
        min_samples_split: [2, 5, 10]
        min_samples_leaf: [1, 2, 4]
    RandomForestClassifier:
      library: sklearn.ensemble
      implementation: RandomForestClassifier
      hyperparameters:
        n_estimators: [50, 100, 200]
        max_depth: [None, 10, 20]
        min_samples_split: [2, 5, 10]
        min_samples_leaf: [1, 2, 4]
    SVC:
      library: sklearn.svm
      implementation: SVC
      hyperparameters:
        C: [0.01, 0.1, 1, 10]
        kernel: ['linear', 'poly', 'rbf', 'sigmoid']
        gamma: ['scale', 'auto']
    KNeighborsClassifier:
      library: sklearn.neighbors
      implementation: KNeighborsClassifier
      hyperparameters:
        n_neighbors: [3, 5, 10]
        weights: ['uniform', 'distance']
        algorithm: ['auto', 'ball_tree', 'kd_tree', 'brute']
    XGBClassifier:
      library: xgboost
      implementation: XGBClassifier
      hyperparameters:
        n_estimators: [50, 100, 200]
        max_depth: [3, 5, 7]
        learning_rate: [0.01, 0.1, 0.2]
    LGBMClassifier:
      library: lightgbm
      implementation: LGBMClassifier
      hyperparameters:
        n_estimators: [50, 100, 200]
        learning_rate: [0.01, 0.1, 0.2]
        max_depth: [-1, 5, 10]
    CatBoostClassifier:
      library: catboost
      implementation: CatBoostClassifier
      hyperparameters:
        iterations: [50, 100, 200]
        depth: [6, 10, 12]
        learning_rate: [0.01, 0.1, 0.2]
    MLPClassifier:
      library: sklearn.neural_network
      implementation: MLPClassifier
      hyperparameters:
        hidden_layer_sizes: [(50,), (100,), (150,)]
        activation: ['relu', 'tanh']
        solver: ['adam', 'sgd']
        max_iter: [200, 300, 500]
