models:
  clustering:
    kmeans:
      library: sklearn.cluster
      implementation: KMeans
      hyperparameters:
        n_clusters: [2, 3, 5, 10]
        init: ["k-means++", "random"]
        max_iter: [300, 500, 1000]
        n_init: [10, 20, 30]

    hierarchical_clustering:
      library: sklearn.cluster
      implementation: AgglomerativeClustering
      hyperparameters:
        n_clusters: [2, 3, 5, 10]
        affinity: ["euclidean", "manhattan", "cosine"]
        linkage: ["ward", "complete", "average", "single"]

    dbscan:
      library: sklearn.cluster
      implementation: DBSCAN
      hyperparameters:
        eps: [0.3, 0.5, 0.7, 1.0]
        min_samples: [5, 10, 20]
        metric: ["euclidean", "manhattan", "cosine"]

    gaussian_mixture:
      library: sklearn.mixture
      implementation: GaussianMixture
      hyperparameters:
        n_components: [2, 3, 5, 10]
        covariance_type: ["full", "tied", "diag", "spherical"]
        max_iter: [100, 200, 500]
        init_params: ["kmeans", "random"]

    birch:
      library: sklearn.cluster
      implementation: Birch
      hyperparameters:
        n_clusters: [None, 2, 3, 5, 10]
        threshold: [0.3, 0.5, 0.7]
        branching_factor: [20, 50, 100]

    affinity_propagation:
      library: sklearn.cluster
      implementation: AffinityPropagation
      hyperparameters:
        damping: [0.5, 0.7, 0.9]
        max_iter: [200, 500, 1000]
        preference: [-50, -10, 0, 10, 50]

    spectral_clustering:
      library: sklearn.cluster
      implementation: SpectralClustering
      hyperparameters:
        n_clusters: [2, 3, 5, 10]
        eigen_solver: [None, "arpack", "lobpcg", "amg"]
        affinity: ["rbf", "nearest_neighbors"]

    mean_shift:
      library: sklearn.cluster
      implementation: MeanShift
      hyperparameters:
        bandwidth: [None, 1.0, 2.0, 5.0]
        bin_seeding: [True, False]

    minibatch_kmeans:
      library: sklearn.cluster
      implementation: MiniBatchKMeans
      hyperparameters:
        n_clusters: [2, 3, 5, 10]
        init: ["k-means++", "random"]
        max_iter: [300, 500, 1000]
        n_init: [10, 20, 30]
