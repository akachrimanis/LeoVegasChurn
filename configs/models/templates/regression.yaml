models:
  regression:
    linear_regression:
      model_name: "Linear Regression"
      library: "sklearn.linear_model"
      implementation: "LinearRegression"
      hyperparameters:
        fit_intercept: [true, false]
        normalize: [true, false]
        copy_X: [true, false]
        n_jobs: [None, -1]
        
    ridge:
      model_name: "Ridge Regression"
      library: "sklearn.linear_model"
      implementation: "Ridge"
      hyperparameters:
        alpha: [0.1, 1, 10, 100, 1000]
        solver: ["auto", "svd", "cholesky", "lsqr"]
        fit_intercept: [true, false]
        normalize: [true, false]
        
    lasso:
      model_name: "Lasso Regression"
      library: "sklearn.linear_model"
      implementation: "Lasso"
      hyperparameters:
        alpha: [0.1, 1, 10, 100]
        fit_intercept: [true, false]
        max_iter: [1000, 2000]
        normalize: [true, false]
        
    elasticnet:
      model_name: "ElasticNet Regression"
      library: "sklearn.linear_model"
      implementation: "ElasticNet"
      hyperparameters:
        alpha: [0.1, 1, 10]
        l1_ratio: [0.1, 0.5, 0.9]
        fit_intercept: [true, false]
        max_iter: [1000, 2000]
        
    decision_tree_regressor:
      model_name: "Decision Tree Regressor"
      library: "sklearn.tree"
      implementation: "DecisionTreeRegressor"
      hyperparameters:
        max_depth: [None, 10, 20, 30, 50]
        min_samples_split: [2, 5, 10]
        min_samples_leaf: [1, 2, 4]
        max_features: [None, "auto", "sqrt", "log2"]
        splitter: ["best", "random"]
        
    random_forest_regressor:
      model_name: "Random Forest Regressor"
      library: "sklearn.ensemble"
      implementation: "RandomForestRegressor"
      hyperparameters:
        n_estimators: [100, 200, 300]
        max_depth: [None, 10, 20, 30]
        min_samples_split: [2, 5, 10]
        min_samples_leaf: [1, 2, 4]
        max_features: [None, "auto", "sqrt", "log2"]
        bootstrap: [true, false]
        
    gradient_boosting_regressor:
      model_name: "Gradient Boosting Regressor"
      library: "sklearn.ensemble"
      implementation: "GradientBoostingRegressor"
      hyperparameters:
        n_estimators: [100, 200, 300]
        learning_rate: [0.01, 0.1, 0.2]
        max_depth: [3, 5, 7]
        min_samples_split: [2, 5, 10]
        min_samples_leaf: [1, 2, 4]
        subsample: [0.8, 1.0]
        
    xgboost_regressor:
      model_name: "XGBoost Regressor"
      library: "xgboost"
      implementation: "XGBRegressor"
      hyperparameters:
        n_estimators: [100, 200, 300]
        learning_rate: [0.01, 0.1, 0.2]
        max_depth: [3, 5, 7]
        subsample: [0.8, 1.0]
        colsample_bytree: [0.3, 0.7, 1.0]
        gamma: [0, 0.1, 0.5]
        alpha: [0, 0.1, 1]
        
    lightgbm_regressor:
      model_name: "LightGBM Regressor"
      library: "lightgbm"
      implementation: "LGBMRegressor"
      hyperparameters:
        n_estimators: [100, 200, 300]
        learning_rate: [0.01, 0.1, 0.2]
        max_depth: [5, 10, 15]
        num_leaves: [31, 50, 100]
        feature_fraction: [0.6, 0.8, 1.0]
        bagging_fraction: [0.6, 0.8, 1.0]
        
    support_vector_regressor:
      model_name: "Support Vector Regressor (SVR)"
      library: "sklearn.svm"
      implementation: "SVR"
      hyperparameters:
        C: [0.1, 1, 10]
        kernel: ["linear", "poly", "rbf", "sigmoid"]
        gamma: ["scale", "auto"]
        epsilon: [0.01, 0.1, 0.2]
        
    k_nearest_neighbors_regressor:
      model_name: "K-Nearest Neighbors Regressor"
      library: "sklearn.neighbors"
      implementation: "KNeighborsRegressor"
      hyperparameters:
        n_neighbors: [3, 5, 7, 10]
        weights: ["uniform", "distance"]
        algorithm: ["auto", "ball_tree", "kd_tree", "brute"]
        p: [1, 2]
        
    elastic_net_regressor:
      model_name: "ElasticNetCV Regressor"
      library: "sklearn.linear_model"
      implementation: "ElasticNetCV"
      hyperparameters:
        alphas: [0.1, 1, 10, 100]
        l1_ratio: [0.1, 0.5, 0.9]
        max_iter: [1000, 2000]
        
    huber_regressor:
      model_name: "Huber Regressor"
      library: "sklearn.linear_model"
      implementation: "HuberRegressor"
      hyperparameters:
        epsilon: [1.35, 2.0, 1.0]
        alpha: [0.1, 1, 10]
        
    bayesian_ridge:
      model_name: "Bayesian Ridge Regression"
      library: "sklearn.linear_model"
      implementation: "BayesianRidge"
      hyperparameters:
        alpha_1: [1e-6, 1e-3, 1]
        alpha_2: [1e-6, 1e-3, 1]
        lambda_1: [1e-6, 1e-3, 1]
        lambda_2: [1e-6, 1e-3, 1]
        
    orthogonal_matching_pursuit:
      model_name: "Orthogonal Matching Pursuit"
      library: "sklearn.linear_model"
      implementation: "OrthogonalMatchingPursuit"
      hyperparameters:
        n_nonzero_coefs: [None, 1, 10, 50]
        tol: [1e-5, 1e-4, 1e-3]
        
    svr:
      model_name: "Support Vector Regressor"
      library: "sklearn.svm"
      implementation: "SVR"
      hyperparameters:
        C: [0.1, 1, 10]
        kernel: ["linear", "poly", "rbf"]
        epsilon: [0.1, 0.2, 0.5]
        gamma: ["scale", "auto"]
